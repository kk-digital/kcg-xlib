// Copyright Â© Clinton Ingram and Contributors.  Licensed under the MIT License.

//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if HWINTRINSICS<#= isa == "Avx512" ? " && NET8_0_OR_GREATER" : "" #>
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Blake2Fast.Implementation;

unsafe partial struct Blake<#= alg.suffix #>HashState
{
	// SIMD algorithm described in https://eprint.iacr.org/2012/275.pdf
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	private static void mix<#= isa #>(<#= alg.wtype #>* sh, <#= alg.wtype #>* m<#= alg == b3 ? $", {alg.wtype}* o, bool truncate" : "" #>)
	{
<#
PushIndent("\t\t");
WriteLine("// This nonsense breaks CSE of these reads, ensuring JIT allocates low regsiters to them.");
WriteLine("nuint zero = Sse2.CompareGreaterThan(Vector128<int>.Zero, Vector128<int>.Zero).AsUInt32().ToScalar();");
if (isa != "Avx512" && !(alg.bits == 64 && isa == "Sse41")) {
#>
byte* prm = (byte*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(rormask)) + zero;
<#
loadrormasks();
WriteLine(null);
}
#>
<#= alg.wtype #>* piv = (<#= alg.wtype #>*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(ivle)) + zero;
<#
loadiv();
WriteLine(null);
WriteLine("// Again breaking CSE, otherwise JIT wastes good registers caching these reads that aren't used again until the end.");
loadstate();
WriteLine(null);
loadmsg1();
WriteLine(null);

for (int i = 0; i < alg.rounds; i++) {
	WriteLine($"//ROUND {i+1}");
	loadcode(i, 0);
	WriteLine(null);

	WriteLine("//G1");
	g1(i == 0);
	WriteLine(null);

	loadcode(i, 1);
	WriteLine(null);

	WriteLine("//G2");
	g2(i == 0);
	WriteLine(null);

	WriteLine("//DIAGONALIZE");
	diagonalize(i == 0);
	WriteLine(null);

	if (i == 0 && alg.bits == 64 && isa == "Sse41") {
		loadmsg2();
		WriteLine(null);
	}

	loadcode(i, 2);
	WriteLine(null);

	WriteLine("//G1");
	g1();
	WriteLine(null);

	loadcode(i, 3);
	WriteLine(null);

	WriteLine("//G2");
	g2();
	WriteLine(null);

	WriteLine("//UNDIAGONALIZE");
	undiagonalize();
	WriteLine(null);

	if (i == 9 && alg.rounds > 10 && isa != "Avx512") {
		WriteLine("// Break CSE so it can't see through to permutations from first 2 rounds.");
		csebreak();
		WriteLine(null);
	}
}
finalize();
PopIndent();
#>
	}
}
#endif