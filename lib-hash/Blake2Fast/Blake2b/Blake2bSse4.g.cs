// Copyright Â© Clinton Ingram and Contributors.  Licensed under the MIT License.

//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if HWINTRINSICS
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Blake2Fast.Implementation;

unsafe partial struct Blake2bHashState
{
	// SIMD algorithm described in https://eprint.iacr.org/2012/275.pdf
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	private static void mixSse41(ulong* sh, ulong* m)
	{
		// This nonsense breaks CSE of these reads, ensuring JIT allocates low regsiters to them.
		nuint zero = Sse2.CompareGreaterThan(Vector128<int>.Zero, Vector128<int>.Zero).AsUInt32().ToScalar();
		ulong* piv = (ulong*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(ivle)) + zero;
		var row3l = Sse2.LoadVector128(piv);
		var row3h = Sse2.LoadVector128(piv + Vector128<ulong>.Count);
		var row4l = Sse2.LoadVector128(piv + Vector128<ulong>.Count * 2);
		var row4h = Sse2.LoadVector128(piv + Vector128<ulong>.Count * 3);

		// Again breaking CSE, otherwise JIT wastes good registers caching these reads that aren't used again until the end.
		var row1l = Sse2.LoadVector128(sh + zero);
		var row1h = Sse2.LoadVector128(sh + zero + Vector128<ulong>.Count);
		var row2l = Sse2.LoadVector128(sh + zero + Vector128<ulong>.Count * 2);
		var row2h = Sse2.LoadVector128(sh + zero + Vector128<ulong>.Count * 3);

		row4l = Sse2.Xor(row4l, Sse2.LoadVector128(sh + Vector128<ulong>.Count * 4)); // t[]
		row4h = Sse2.Xor(row4h, Sse2.LoadVector128(sh + Vector128<ulong>.Count * 5)); // f[]

		var m0 = Sse2.LoadVector128(m);
		var m1 = Sse2.LoadVector128(m + Vector128<ulong>.Count);
		var m2 = Sse2.LoadVector128(m + Vector128<ulong>.Count * 2);
		var m3 = Sse2.LoadVector128(m + Vector128<ulong>.Count * 3);

		//ROUND 1
		var b0 = Sse2.UnpackLow(m0, m1);
		var b1 = Sse2.UnpackLow(m2, m3);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		var r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackHigh(m0, m1);
		b1 = Sse2.UnpackHigh(m2, m3);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		var r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		var t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		var t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		var m4 = Sse2.LoadVector128(m + Vector128<ulong>.Count * 4);
		var m5 = Sse2.LoadVector128(m + Vector128<ulong>.Count * 5);
		var m6 = Sse2.LoadVector128(m + Vector128<ulong>.Count * 6);
		var m7 = Sse2.LoadVector128(m + Vector128<ulong>.Count * 7);

		b0 = Sse2.UnpackLow(m7, m4);
		b1 = Sse2.UnpackLow(m5, m6);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackHigh(m7, m4);
		b1 = Sse2.UnpackHigh(m5, m6);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 2
		b0 = Sse2.UnpackLow(m7, m2);
		b1 = Sse2.UnpackHigh(m4, m6);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackLow(m5, m4);
		b1 = Sse2.Shuffle(m7.AsDouble(), m3.AsDouble(), 0b_01).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.UnpackHigh(m2, m0);
		b1 = Sse41.Blend(m0.AsSingle(), m5.AsSingle(), 0b_11_00).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m1.AsDouble(), m6.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse41.Blend(m1.AsSingle(), m3.AsSingle(), 0b_11_00).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 3
		b0 = Sse2.Shuffle(m5.AsDouble(), m6.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse2.UnpackHigh(m2, m7);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackLow(m4, m0);
		b1 = Sse41.Blend(m1.AsSingle(), m6.AsSingle(), 0b_11_00).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.Shuffle(m4.AsDouble(), m5.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse2.UnpackHigh(m1, m3);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackLow(m2, m7);
		b1 = Sse41.Blend(m3.AsSingle(), m0.AsSingle(), 0b_11_00).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 4
		b0 = Sse2.UnpackHigh(m3, m1);
		b1 = Sse2.UnpackHigh(m6, m5);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackHigh(m4, m0);
		b1 = Sse2.UnpackLow(m6, m7);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.Shuffle(m7.AsDouble(), m1.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse2.Shuffle(m2.AsUInt32(), 0b_01_00_11_10).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackLow(m4, m3);
		b1 = Sse2.UnpackLow(m5, m0);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 5
		b0 = Sse2.UnpackHigh(m4, m2);
		b1 = Sse2.UnpackLow(m1, m5);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse41.Blend(m0.AsSingle(), m3.AsSingle(), 0b_11_00).AsUInt64();
		b1 = Sse41.Blend(m2.AsSingle(), m7.AsSingle(), 0b_11_00).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.Shuffle(m1.AsDouble(), m7.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse2.Shuffle(m5.AsDouble(), m3.AsDouble(), 0b_01).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackHigh(m6, m0);
		b1 = Sse2.UnpackLow(m6, m4);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 6
		b0 = Sse2.UnpackLow(m1, m3);
		b1 = Sse2.UnpackLow(m0, m4);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackLow(m6, m5);
		b1 = Sse2.UnpackHigh(m5, m1);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.Shuffle(m0.AsDouble(), m2.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse2.UnpackHigh(m3, m7);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m4.AsDouble(), m6.AsDouble(), 0b_11).AsUInt64();
		b1 = Sse2.Shuffle(m2.AsDouble(), m7.AsDouble(), 0b_01).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 7
		b0 = Sse41.Blend(m6.AsSingle(), m0.AsSingle(), 0b_11_00).AsUInt64();
		b1 = Sse2.Shuffle(m7.AsDouble(), m2.AsDouble(), 0b_00).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m2.AsDouble(), m7.AsDouble(), 0b_11).AsUInt64();
		b1 = Sse2.Shuffle(m6.AsDouble(), m5.AsDouble(), 0b_01).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.Shuffle(m4.AsDouble(), m0.AsDouble(), 0b_00).AsUInt64();
		b1 = Sse41.Blend(m3.AsSingle(), m4.AsSingle(), 0b_11_00).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackHigh(m5, m3);
		b1 = Sse2.Shuffle(m1.AsUInt32(), 0b_01_00_11_10).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 8
		b0 = Sse2.UnpackHigh(m6, m3);
		b1 = Sse41.Blend(m6.AsSingle(), m1.AsSingle(), 0b_11_00).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m5.AsDouble(), m7.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse2.UnpackHigh(m0, m4);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse41.Blend(m1.AsSingle(), m2.AsSingle(), 0b_11_00).AsUInt64();
		b1 = Sse2.Shuffle(m7.AsDouble(), m4.AsDouble(), 0b_01).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m5.AsDouble(), m0.AsDouble(), 0b_00).AsUInt64();
		b1 = Sse2.Shuffle(m2.AsDouble(), m3.AsDouble(), 0b_00).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 9
		b0 = Sse2.UnpackLow(m3, m7);
		b1 = Sse2.Shuffle(m5.AsDouble(), m0.AsDouble(), 0b_01).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m7.AsDouble(), m4.AsDouble(), 0b_11).AsUInt64();
		b1 = Sse2.Shuffle(m1.AsDouble(), m4.AsDouble(), 0b_01).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.Shuffle(m5.AsDouble(), m6.AsDouble(), 0b_00).AsUInt64();
		b1 = Sse2.Shuffle(m6.AsDouble(), m0.AsDouble(), 0b_11).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m2.AsDouble(), m1.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse2.Shuffle(m3.AsDouble(), m2.AsDouble(), 0b_01).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 10
		b0 = Sse2.Shuffle(m5.AsDouble(), m4.AsDouble(), 0b_00).AsUInt64();
		b1 = Sse2.UnpackHigh(m3, m0);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackLow(m1, m2);
		b1 = Sse41.Blend(m3.AsSingle(), m2.AsSingle(), 0b_11_00).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.UnpackHigh(m6, m7);
		b1 = Sse2.UnpackHigh(m4, m1);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m0.AsDouble(), m5.AsDouble(), 0b_10).AsUInt64();
		b1 = Sse2.UnpackLow(m7, m6);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		// Break CSE so it can't see through to permutations from first 2 rounds.
		var vz = Sse2.CompareGreaterThan(b0.AsInt32(), b0.AsInt32()).AsUInt64();
		m0 = Sse2.Xor(m0, vz);
		m2 = Sse2.Xor(m2, vz);
		m3 = Sse2.Xor(m3, vz);
		m4 = Sse2.Xor(m4, vz);
		m6 = Sse2.Xor(m6, vz);

		//ROUND 11
		b0 = Sse2.UnpackLow(m0, m1);
		b1 = Sse2.UnpackLow(m2, m3);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackHigh(m0, m1);
		b1 = Sse2.UnpackHigh(m2, m3);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.UnpackLow(m7, m4);
		b1 = Sse2.UnpackLow(m5, m6);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackHigh(m7, m4);
		b1 = Sse2.UnpackHigh(m5, m6);

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		//ROUND 12
		b0 = Sse2.UnpackLow(m7, m2);
		b1 = Sse2.UnpackHigh(m4, m6);

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.UnpackLow(m5, m4);
		b1 = Sse2.Shuffle(m7.AsDouble(), m3.AsDouble(), 0b_01).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//DIAGONALIZE
		t0 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		b0 = Sse2.UnpackHigh(m2, m0);
		b1 = Sse41.Blend(m0.AsSingle(), m5.AsSingle(), 0b_11_00).AsUInt64();

		//G1
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
		row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		r24 = Vector128.Create((byte)3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
		row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
		row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();

		b0 = Sse2.Shuffle(m1.AsDouble(), m6.AsDouble(), 0b_01).AsUInt64();
		b1 = Sse41.Blend(m1.AsSingle(), m3.AsSingle(), 0b_11_00).AsUInt64();

		//G2
		row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
		row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

		row4l = Sse2.Xor(row4l, row1l);
		row4h = Sse2.Xor(row4h, row1h);

		r16 = Vector128.Create((byte)2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
		row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
		row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();

		row3l = Sse2.Add(row3l, row4l);
		row3h = Sse2.Add(row3h, row4h);

		row2l = Sse2.Xor(row2l, row3l);
		row2h = Sse2.Xor(row2h, row3h);

		row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
		row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

		//UNDIAGONALIZE
		t0 = Sse2.Shuffle(row1h.AsDouble(), row1l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row1l.AsDouble(), row1h.AsDouble(), 0b_01).AsUInt64();
		row1l = t1;
		row1h = t0;

		b0 = row4l;
		row4l = row4h;
		row4h = b0;

		t0 = Sse2.Shuffle(row3h.AsDouble(), row3l.AsDouble(), 0b_01).AsUInt64();
		t1 = Sse2.Shuffle(row3l.AsDouble(), row3h.AsDouble(), 0b_01).AsUInt64();
		row3l = t0;
		row3h = t1;

		row1l = Sse2.Xor(row1l, row3l);
		row1h = Sse2.Xor(row1h, row3h);
		row1l = Sse2.Xor(row1l, Sse2.LoadVector128(sh));
		row1h = Sse2.Xor(row1h, Sse2.LoadVector128(sh + Vector128<ulong>.Count));
		Sse2.Store(sh, row1l);
		Sse2.Store(sh + Vector128<ulong>.Count, row1h);

		row2l = Sse2.Xor(row2l, row4l);
		row2h = Sse2.Xor(row2h, row4h);
		row2l = Sse2.Xor(row2l, Sse2.LoadVector128(sh + Vector128<ulong>.Count * 2));
		row2h = Sse2.Xor(row2h, Sse2.LoadVector128(sh + Vector128<ulong>.Count * 3));
		Sse2.Store(sh + Vector128<ulong>.Count * 2, row2l);
		Sse2.Store(sh + Vector128<ulong>.Count * 3, row2h);
	}
}
#endif