<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".g.cs" encoding="utf-8" #>
<# var alg = b2b; string isa = Host.TemplateFile.Contains("Avx512") ? "Avx512" : "Avx2"; #>
<#@ include file="..\_BlakeSimd.ttinclude" #><#@ include file="..\_BlakeAlg.ttinclude" #>
<#+

void loadrormasks() {
#>
var r24 = Avx2.BroadcastVector128ToVector256(prm);
var r16 = Avx2.BroadcastVector128ToVector256(prm + Vector128<byte>.Count);
<#+
}

void loadiv() {
#>
var row3 = Avx.LoadVector256(piv);
var row4 = Avx.LoadVector256(piv + Vector256<ulong>.Count);
<#+
}

void loadstate() {
#>
var row1 = Avx.LoadVector256(sh + zero);
var row2 = Avx.LoadVector256(sh + zero + Vector256<ulong>.Count);
<#+
	WriteLine(null);
#>
row4 = Avx2.Xor(row4, Avx.LoadVector256(sh + Vector256<ulong>.Count * 2)); // t[] and f[]
<#+
}

void loadmsg1() {
#>
var m0 = Avx2.BroadcastVector128ToVector256(m);
var m1 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count);
var m2 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 2);
var m3 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 3);
var m4 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 4);
var m5 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 5);
var m6 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 6);
var m7 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 7);
<#+
}

void loadmsg2() {
}

void csebreak() {
#>
var vz = Avx2.CompareGreaterThan(b0.AsInt32(), b0.AsInt32()).AsUInt64();
m0 = Avx2.Xor(m0, vz);
m1 = Avx2.Xor(m1, vz);
m2 = Avx2.Xor(m2, vz);
m3 = Avx2.Xor(m3, vz);
m4 = Avx2.Xor(m4, vz);
m7 = Avx2.Xor(m7, vz);
<#+
}

void finalize() {
#>
row1 = Avx2.Xor(row1, row3);
row2 = Avx2.Xor(row2, row4);
row1 = Avx2.Xor(row1, Avx.LoadVector256(sh));
row2 = Avx2.Xor(row2, Avx.LoadVector256(sh + Vector256<ulong>.Count));
<#+
	WriteLine(null);
#>
Avx.Store(sh, row1);
Avx.Store(sh + Vector256<ulong>.Count, row2);
<#+
}

void diagonalize(bool first = false) {
#>
row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);
<#+
}

void undiagonalize() {
#>
row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);
<#+
}

void g1(bool first = false) {
#>
row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
<#+
	if (Host.TemplateFile.Contains("Avx512")) {
#>
row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);
<#+
	} else {
#>
row4 = Avx2.Xor(row4, row1);
row4 = Avx2.Shuffle(row4.AsUInt32(), 0b_10_11_00_01).AsUInt64();
<#+
	}
	WriteLine(null);
#>
row3 = Avx2.Add(row3, row4);
<#+
	if (Host.TemplateFile.Contains("Avx512")) {
#>
row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);
<#+
	} else {
#>
row2 = Avx2.Xor(row2, row3);
row2 = Avx2.Shuffle(row2.AsByte(), r24).AsUInt64();
<#+
	}
}

void g2(bool first = false) {
#>
row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
<#+
	if (Host.TemplateFile.Contains("Avx512")) {
#>
row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);
<#+
	} else {
#>
row4 = Avx2.Xor(row4, row1);
row4 = Avx2.Shuffle(row4.AsByte(), r16).AsUInt64();
<#+
	}
	WriteLine(null);
#>
row3 = Avx2.Add(row3, row4);
<#+
	if (Host.TemplateFile.Contains("Avx512")) {
#>
row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);
<#+
	} else {
#>
row2 = Avx2.Xor(row2, row3);
row2 = Avx2.Xor(Avx2.ShiftRightLogical(row2, 63), Avx2.Add(row2, row2));
<#+
	}
}

void loadcode(int round, int part) {
	int r = round % 10 * 10 + part;
	switch (r) {
		case 0:
		// 0, 4 / 2, 6
#>
<#= round == 0 ? "var " : "" #>t0 = Avx2.UnpackLow(m0, m2);
<#= round == 0 ? "var " : "" #>t1 = Avx2.UnpackLow(m1, m3);
<#= round == 0 ? "var " : "" #>b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 1:
		// 1, 5 / 3, 7
#>
t0 = Avx2.UnpackHigh(m0, m2);
t1 = Avx2.UnpackHigh(m1, m3);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 2:
		// 14, 10 / 8, 12
#>
t0 = Avx2.UnpackLow(m7, m5);
t1 = Avx2.UnpackLow(m4, m6);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 3:
		// 15, 11 / 9, 13
#>
t0 = Avx2.UnpackHigh(m7, m5);
t1 = Avx2.UnpackHigh(m4, m6);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 10:
		// 14, 4 / 9, 13
#>
t0 = Avx2.UnpackLow(m7, m2);
b0 = Avx2.Blend(t0.AsUInt32(), t1.AsUInt32(), 0b_1111_0000).AsUInt64();
<#+
			break;
		case 11:
		// 10, 15 / 8, 6
#>
t0 = Avx2.Blend(m5.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
t1 = Avx2.UnpackLow(m4, m3);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 12:
		// 0, 1 / 5, 11
#>
t0 = Avx2.UnpackHigh(m2, m5);
b0 = Avx2.Blend(m0.AsUInt32(), t0.AsUInt32(), 0b_1100_0011).AsUInt64();
<#+
			break;
		case 13:
		// 2, 3 / 7, 12
#>
t1 = Avx.Shuffle(m3.AsDouble(), m6.AsDouble(), 0b_01_01).AsUInt64();
b0 = Avx.Shuffle(m1.AsDouble(), t1.AsDouble(), 0b_00_11).AsUInt64();
<#+
			break;
		case 20:
		// 5, 11 / 12, 15
#>
t1 = Avx2.Blend(m6.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_10_01).AsUInt64();
<#+
			break;
		case 21:
		// 8, 2 / 0, 13
#>
t0 = Avx2.UnpackLow(m4, m1);
t1 = Avx2.Blend(m0.AsUInt32(), m6.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 22:
		// 9, 3 / 10, 7
#>
t0 = Avx2.UnpackHigh(m4, m1);
t1 = Avx2.Blend(m5.AsUInt32(), m3.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 23:
		// 4, 6 / 14, 1
#>
t0 = Avx2.UnpackLow(m2, m3);
t1 = Avx2.Blend(m7.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 30:
		// 7, 13 / 3, 11
#>
t0 = Avx2.UnpackHigh(m3, m6);
t1 = Avx2.UnpackHigh(m1, m5);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 31:
		// 12, 9 / 14, 1
#>
t0 = Avx2.Blend(m6.AsUInt32(), m4.AsUInt32(), 0b_1100_1100).AsUInt64();
t1 = Avx2.Blend(m7.AsUInt32(), m0.AsUInt32(), 0b_0000_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_00_11).AsUInt64();
<#+
			break;
		case 32:
		// 15, 5 / 2, 4
#>
t0 = Avx2.UnpackHigh(m7, m2);
t1 = Avx2.UnpackLow(m1, m2);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 33:
		// 8, 10 / 6, 0
#>
t0 = Avx2.UnpackLow(m4, m5);
t1 = Avx2.UnpackLow(m3, m0);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 40:
		// 2, 9 / 10, 5
#>
t0 = Avx2.Blend(m1.AsUInt32(), m4.AsUInt32(), 0b_1100_1100).AsUInt64();
t1 = Avx2.Blend(m5.AsUInt32(), m2.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_00_11).AsUInt64();
<#+
			break;
		case 41:
		// 0, 4 / 7, 15
#>
t0 = Avx.Shuffle(m0.AsDouble(), m2.AsDouble(), 0b_00_00).AsUInt64();
t1 = Avx2.UnpackHigh(m3, m7);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 42:
#>
t0 = Avx.Shuffle(m1.AsDouble(), m5.AsDouble(), 0b_11_11).AsUInt64();
t1 = Avx2.UnpackLow(m7, m3);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 43:
		// 12, 13 / 8, 1
#>
t0 = Avx2.Blend(m4.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(m6.AsDouble(), t0.AsDouble(), 0b_00_11).AsUInt64();
<#+
			break;
		case 50:
		// 2, 0 / 6, 8
#>
t0 = Avx2.UnpackLow(m1, m0);
t1 = Avx2.UnpackLow(m3, m4);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 51:
		// 12, 11 / 10, 3
#>
t0 = Avx2.Blend(m6.AsUInt32(), m5.AsUInt32(), 0b_1100_1100).AsUInt64();
t1 = Avx2.Blend(m5.AsUInt32(), m1.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 52:
		// 1, 7 / 4, 15
#>
t0 = Avx2.UnpackHigh(m0, m3);
t1 = Avx2.Blend(m2.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 53:
		// 9, 5 / 14, 13
#>
t0 = Avx2.UnpackHigh(m4, m2);
t1 = Avx2.Blend(m7.AsUInt32(), m6.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();
<#+
			break;
		case 60:
		// 12, 14 / 4, 1
#>
t0 = Avx2.UnpackLow(m6, m7);
t1 = Avx2.Blend(m2.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();
<#+
			break;
		case 61:
		// 5, 13 / 10, 15
#>
t0 = Avx2.UnpackHigh(m2, m6);
t1 = Avx2.Blend(m5.AsUInt32(), m7.AsUInt32(), 0b_0000_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();
<#+
			break;
		case 62:
		// 8, 9 / 6, 0
#>
t0 = Avx.Shuffle(m3.AsDouble(), m0.AsDouble(), 0b_00_00).AsUInt64();
b0 = Avx2.Blend(m4.AsUInt32(), t0.AsUInt32(), 0b_0011_1100).AsUInt64();
<#+
			break;
		case 63:
		// 3, 7 / 11, 2
#>
t0 = Avx.Shuffle(m1.AsDouble(), m3.AsDouble(), 0b_11_11).AsUInt64();
t1 = Avx.Shuffle(m5.AsDouble(), m1.AsDouble(), 0b_01_01).AsUInt64();
b0 = Avx2.Blend(t0.AsUInt32(), t1.AsUInt32(), 0b_1100_0011).AsUInt64();
<#+
			break;
		case 70:
		// 12, 13 / 3, 7
#>
b0 = Avx.Shuffle(m6.AsDouble(), t0.AsDouble(), 0b_00_11).AsUInt64();
<#+
			break;
		case 71:
		// 11, 1 / 14, 9
#>
t0 = Avx2.UnpackHigh(m5, m0);
t1 = Avx2.Blend(m7.AsUInt32(), m4.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 72:
		// 2, 15 / 8, 5
#>
t0 = Avx2.Blend(m1.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
t1 = Avx2.Blend(m4.AsUInt32(), m2.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();
<#+
			break;
		case 73:
		// 10, 4 / 0, 6
#>
t0 = Avx2.UnpackLow(m5, m2);
t1 = Avx2.UnpackLow(m0, m3);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 80:
		// 6, 11 / 14, 0
#>
t0 = Avx2.Blend(m3.AsUInt32(), m5.AsUInt32(), 0b_1100_1100).AsUInt64();
t1 = Avx2.UnpackLow(m7, m0);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 81:
		// 3, 15 / 8, 9
#>
t0 = Avx2.UnpackHigh(m1, m7);
b0 = Avx.Shuffle(t0.AsDouble(), m4.AsDouble(), 0b_00_11).AsUInt64();
<#+
			break;
		case 82:
		// 10, 13 / 12, 1
#>
t0 = Avx2.Blend(m5.AsUInt32(), m6.AsUInt32(), 0b_1100_1100).AsUInt64();
t1 = Avx2.Blend(m6.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 83:
		// 5, 7 / 2, 4
#>
t0 = Avx2.UnpackHigh(m2, m3);
t1 = Avx.Shuffle(m1.AsDouble(), m2.AsDouble(), 0b_00_00).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 90:
		// 10, 7 / 8, 1
#>
t0 = Avx2.Blend(m5.AsUInt32(), m3.AsUInt32(), 0b_1111_1100).AsUInt64();
t1 = Avx2.Blend(m4.AsUInt32(), m0.AsUInt32(), 0b_1111_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 91:
		// 2, 6 / 4, 5
#>
t0 = Avx.Shuffle(m1.AsDouble(), m3.AsDouble(), 0b_00_00).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), m2.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 92:
		// 13, 9 / 15, 3
#>
t0 = Avx2.UnpackHigh(m6, m4);
t1 = Avx2.UnpackHigh(m7, m1);
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();
<#+
			break;
		case 93:
		// 0, 14 / 12, 11
#>
t0 = Avx2.UnpackLow(m0, m7);
t1 = Avx2.Blend(m6.AsUInt32(), m5.AsUInt32(), 0b_0000_1100).AsUInt64();
b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();
<#+
			break;
	}
}
#>