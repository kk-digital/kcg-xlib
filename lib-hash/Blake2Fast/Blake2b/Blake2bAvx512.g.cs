// Copyright Â© Clinton Ingram and Contributors.  Licensed under the MIT License.

//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if HWINTRINSICS && NET8_0_OR_GREATER
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Blake2Fast.Implementation;

unsafe partial struct Blake2bHashState
{
	// SIMD algorithm described in https://eprint.iacr.org/2012/275.pdf
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	private static void mixAvx512(ulong* sh, ulong* m)
	{
		// This nonsense breaks CSE of these reads, ensuring JIT allocates low regsiters to them.
		nuint zero = Sse2.CompareGreaterThan(Vector128<int>.Zero, Vector128<int>.Zero).AsUInt32().ToScalar();
		ulong* piv = (ulong*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(ivle)) + zero;
		var row3 = Avx.LoadVector256(piv);
		var row4 = Avx.LoadVector256(piv + Vector256<ulong>.Count);

		// Again breaking CSE, otherwise JIT wastes good registers caching these reads that aren't used again until the end.
		var row1 = Avx.LoadVector256(sh + zero);
		var row2 = Avx.LoadVector256(sh + zero + Vector256<ulong>.Count);

		row4 = Avx2.Xor(row4, Avx.LoadVector256(sh + Vector256<ulong>.Count * 2)); // t[] and f[]

		var m0 = Avx2.BroadcastVector128ToVector256(m);
		var m1 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count);
		var m2 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 2);
		var m3 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 3);
		var m4 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 4);
		var m5 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 5);
		var m6 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 6);
		var m7 = Avx2.BroadcastVector128ToVector256(m + Vector128<ulong>.Count * 7);

		//ROUND 1
		var t0 = Avx2.UnpackLow(m0, m2);
		var t1 = Avx2.UnpackLow(m1, m3);
		var b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m0, m2);
		t1 = Avx2.UnpackHigh(m1, m3);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackLow(m7, m5);
		t1 = Avx2.UnpackLow(m4, m6);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m7, m5);
		t1 = Avx2.UnpackHigh(m4, m6);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 2
		t0 = Avx2.UnpackLow(m7, m2);
		b0 = Avx2.Blend(t0.AsUInt32(), t1.AsUInt32(), 0b_1111_0000).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.Blend(m5.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.UnpackLow(m4, m3);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackHigh(m2, m5);
		b0 = Avx2.Blend(m0.AsUInt32(), t0.AsUInt32(), 0b_1100_0011).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t1 = Avx.Shuffle(m3.AsDouble(), m6.AsDouble(), 0b_01_01).AsUInt64();
		b0 = Avx.Shuffle(m1.AsDouble(), t1.AsDouble(), 0b_00_11).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 3
		t1 = Avx2.Blend(m6.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_10_01).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackLow(m4, m1);
		t1 = Avx2.Blend(m0.AsUInt32(), m6.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackHigh(m4, m1);
		t1 = Avx2.Blend(m5.AsUInt32(), m3.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackLow(m2, m3);
		t1 = Avx2.Blend(m7.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 4
		t0 = Avx2.UnpackHigh(m3, m6);
		t1 = Avx2.UnpackHigh(m1, m5);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.Blend(m6.AsUInt32(), m4.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.Blend(m7.AsUInt32(), m0.AsUInt32(), 0b_0000_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_00_11).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackHigh(m7, m2);
		t1 = Avx2.UnpackLow(m1, m2);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackLow(m4, m5);
		t1 = Avx2.UnpackLow(m3, m0);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 5
		t0 = Avx2.Blend(m1.AsUInt32(), m4.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.Blend(m5.AsUInt32(), m2.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_00_11).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx.Shuffle(m0.AsDouble(), m2.AsDouble(), 0b_00_00).AsUInt64();
		t1 = Avx2.UnpackHigh(m3, m7);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx.Shuffle(m1.AsDouble(), m5.AsDouble(), 0b_11_11).AsUInt64();
		t1 = Avx2.UnpackLow(m7, m3);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.Blend(m4.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(m6.AsDouble(), t0.AsDouble(), 0b_00_11).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 6
		t0 = Avx2.UnpackLow(m1, m0);
		t1 = Avx2.UnpackLow(m3, m4);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.Blend(m6.AsUInt32(), m5.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.Blend(m5.AsUInt32(), m1.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackHigh(m0, m3);
		t1 = Avx2.Blend(m2.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m4, m2);
		t1 = Avx2.Blend(m7.AsUInt32(), m6.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 7
		t0 = Avx2.UnpackLow(m6, m7);
		t1 = Avx2.Blend(m2.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m2, m6);
		t1 = Avx2.Blend(m5.AsUInt32(), m7.AsUInt32(), 0b_0000_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx.Shuffle(m3.AsDouble(), m0.AsDouble(), 0b_00_00).AsUInt64();
		b0 = Avx2.Blend(m4.AsUInt32(), t0.AsUInt32(), 0b_0011_1100).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx.Shuffle(m1.AsDouble(), m3.AsDouble(), 0b_11_11).AsUInt64();
		t1 = Avx.Shuffle(m5.AsDouble(), m1.AsDouble(), 0b_01_01).AsUInt64();
		b0 = Avx2.Blend(t0.AsUInt32(), t1.AsUInt32(), 0b_1100_0011).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 8
		b0 = Avx.Shuffle(m6.AsDouble(), t0.AsDouble(), 0b_00_11).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m5, m0);
		t1 = Avx2.Blend(m7.AsUInt32(), m4.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.Blend(m1.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.Blend(m4.AsUInt32(), m2.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackLow(m5, m2);
		t1 = Avx2.UnpackLow(m0, m3);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 9
		t0 = Avx2.Blend(m3.AsUInt32(), m5.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.UnpackLow(m7, m0);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m1, m7);
		b0 = Avx.Shuffle(t0.AsDouble(), m4.AsDouble(), 0b_00_11).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.Blend(m5.AsUInt32(), m6.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.Blend(m6.AsUInt32(), m0.AsUInt32(), 0b_1100_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m2, m3);
		t1 = Avx.Shuffle(m1.AsDouble(), m2.AsDouble(), 0b_00_00).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 10
		t0 = Avx2.Blend(m5.AsUInt32(), m3.AsUInt32(), 0b_1111_1100).AsUInt64();
		t1 = Avx2.Blend(m4.AsUInt32(), m0.AsUInt32(), 0b_1111_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx.Shuffle(m1.AsDouble(), m3.AsDouble(), 0b_00_00).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), m2.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackHigh(m6, m4);
		t1 = Avx2.UnpackHigh(m7, m1);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackLow(m0, m7);
		t1 = Avx2.Blend(m6.AsUInt32(), m5.AsUInt32(), 0b_0000_1100).AsUInt64();
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_01_10).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 11
		t0 = Avx2.UnpackLow(m0, m2);
		t1 = Avx2.UnpackLow(m1, m3);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m0, m2);
		t1 = Avx2.UnpackHigh(m1, m3);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackLow(m7, m5);
		t1 = Avx2.UnpackLow(m4, m6);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.UnpackHigh(m7, m5);
		t1 = Avx2.UnpackHigh(m4, m6);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		//ROUND 12
		t0 = Avx2.UnpackLow(m7, m2);
		b0 = Avx2.Blend(t0.AsUInt32(), t1.AsUInt32(), 0b_1111_0000).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t0 = Avx2.Blend(m5.AsUInt32(), m7.AsUInt32(), 0b_1100_1100).AsUInt64();
		t1 = Avx2.UnpackLow(m4, m3);
		b0 = Avx.Shuffle(t0.AsDouble(), t1.AsDouble(), 0b_11_00).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//DIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_10_01_00_11);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_00_11_10_01);

		t0 = Avx2.UnpackHigh(m2, m5);
		b0 = Avx2.Blend(m0.AsUInt32(), t0.AsUInt32(), 0b_1100_0011).AsUInt64();

		//G1
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 32);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 24);

		t1 = Avx.Shuffle(m3.AsDouble(), m6.AsDouble(), 0b_01_01).AsUInt64();
		b0 = Avx.Shuffle(m1.AsDouble(), t1.AsDouble(), 0b_00_11).AsUInt64();

		//G2
		row1 = Avx2.Add(Avx2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Avx2.Xor(row4, row1), 16);

		row3 = Avx2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Avx2.Xor(row2, row3), 63);

		//UNDIAGONALIZE
		row1 = Avx2.Permute4x64(row1, 0b_00_11_10_01);
		row4 = Avx2.Permute4x64(row4, 0b_01_00_11_10);
		row3 = Avx2.Permute4x64(row3, 0b_10_01_00_11);

		row1 = Avx2.Xor(row1, row3);
		row2 = Avx2.Xor(row2, row4);
		row1 = Avx2.Xor(row1, Avx.LoadVector256(sh));
		row2 = Avx2.Xor(row2, Avx.LoadVector256(sh + Vector256<ulong>.Count));

		Avx.Store(sh, row1);
		Avx.Store(sh + Vector256<ulong>.Count, row2);
	}
}
#endif